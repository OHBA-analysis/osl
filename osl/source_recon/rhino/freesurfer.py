#!/usr/bin/env python

"""Freesurfer related functions.

"""

import os.path as op

import numpy as np
from mne.surface import write_surface

from osl.utils import soft_import
from osl.source_recon.rhino.utils import (
    _get_vtk_mesh_native, niimask2indexpointcloud, xform_points
)


def create_freesurfer_mesh(
    infile, surf_outfile, xform_mri_voxel2mri, nii_mesh_file=None
):
    """Creates surface mesh in .surf format and in native mri space in mm
    from infile.

    Parameters
    ----------
    infile : string
    Either:
        1) .nii.gz file containing zero's for background and one's for surface
        2) .vtk file generated by bet_surf (in which case the path to the
        strutural MRI, smri_file, must be included as an input)
    surf_outfile : string
        Path to the .surf file generated, containing the surface
        mesh in mm
    xform_mri_voxel2mri : numpy.ndarray
        4x4 array
        Transform from voxel indices to native/mri mm
    nii_mesh_file : string
        Path to the niftii mesh file that is the niftii equivalent
        of vtk file passed in as infile (only needed if infile
        is a vtk file)
    """

    pth, name = op.split(infile)
    name, ext = op.splitext(name)

    if ext == ".gz":
        print("Creating surface mesh for {} .....".format(infile))

        # Soft import raising an informative warning if not installed
        o3d = soft_import("open3d")

        name, ext = op.splitext(name)
        if ext != ".nii":
            raise ValueError("Invalid infile. Needs to be a .nii.gz or .vtk file")

        # convert to point cloud in voxel indices
        nii_nativeindex = niimask2indexpointcloud(infile)

        step = 1
        nii_native = xform_points(xform_mri_voxel2mri, nii_nativeindex[:, 0:-1:step])

        pcd = o3d.geometry.PointCloud()
        pcd.points = o3d.utility.Vector3dVector(nii_native.T)
        pcd.estimate_normals()
        # to obtain a consistent normal orientation
        pcd.orient_normals_towards_camera_location(pcd.get_center())

        # or you might want to flip the normals to make them point outward, not mandatory
        pcd.normals = o3d.utility.Vector3dVector(-np.asarray(pcd.normals))

        mesh = o3d.geometry.TriangleMesh.create_from_point_cloud_poisson(pcd, depth=8)[0]

        # mesh = mesh.simplify_quadric_decimation(nii_nativeindex.shape[1])

        verts = np.asarray(mesh.vertices)
        tris = np.asarray(mesh.triangles).astype(int)

        # output in freesurfer file format
        write_surface(
            surf_outfile, verts, tris, file_format="freesurfer", overwrite=True
        )

    elif ext == ".vtk":
        if nii_mesh_file is None:
            raise ValueError(
                "You must specify a nii_mesh_file (niftii format), "
                + "if infile format is vtk"
            )

        rrs_native, tris_native = _get_vtk_mesh_native(infile, nii_mesh_file)

        write_surface(
            surf_outfile,
            rrs_native,
            tris_native,
            file_format="freesurfer",
            overwrite=True,
        )

    else:
        raise ValueError("Invalid infile. Needs to be a .nii.gz or .vtk file")
